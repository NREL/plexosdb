[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/plexosdb/__version__.py"

[project]
name = "plexosdb"
dynamic = ["version"]
readme = "README.md"
license = {file = "LICENSE.txt"}
keywords = []
authors = [
    { name = "Pedro Andres Sanchez Perez", email = "psanchez@nrel.gov" },
    { name = "Kodi Obika", email = "kodi.obika@nrel.gov" },
]
maintainers = [
    { name = "Pedro Andres Sanchez Perez", email = "psanchez@nrel.gov" },
    { name = "Kodi Obika", email = "kodi.obika@nrel.gov" },
]
description = "SQLite API for plexos XMLs"
dependencies = [
    "loguru~=0.7.2",
]
requires-python = ">= 3.11"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Topic :: Software Development :: Build Tools",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]



[project.urls]
Documentation = "https://github.com/NREL/plexosdb#readme"
Issues = "https://github.com/NREL/plexosdb/issues"
Source = "https://github.com/NREL/plexosdb"
Changelog = "https://github.com/NREL/plexosdb/blob/master/CHANGELOG.md"

[dependency-groups]
docs = [
    "furo",
    "sphinx-book-theme",
    "ghp-import",
    "myst-parser",
    "sphinx-copybutton",
    "sphinx-tabs",
    "sphinxcontrib-mermaid",
    "sphinx-autobuild>=2024.10.3",
    "sphinx-multiversion>=0.2.4",
    "sphinxcontrib-versioning>=2.2.1",
]
dev = [
    "pytest-benchmark>=5.1.0",
    "bump2version",
    "ipython",
    "pudb",
    "mypy~=1.11.0",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "ruff~=0.5.2",
]

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.json", "*.csv", "*.xml", ".sql"]

[tool.setuptools.packages.find]
where = ["src"]

# Setuptools configuration
[tool.setuptools.dynamic]
readme = { file = ["README.md"], content-type = "text/markdown" }

[tool.ruff]
line-length = 110
target-version = "py311"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle
    "TD",  # flake-8 todos
    "RUF", # Ruff rules
    "N",   # pep8
    "F",   # pyflakes
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "C90", # Complex code
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
extend-ignore = ['D105', 'D107', 'D205', 'D415']
pydocstyle.convention = "numpy"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "D104"]
"__main__.py" = ["D100", "E402", "F401", "F403", "D104"]
"**/{tests,docs,tools}/*" = ["D100", "D103", "E402"]

[tool.pytest.ini_options]
pythonpath = [
  "src"
]
markers = [
    "getters: Functions that get data",
    "adders: Functions that add data",
    "empty_database: Functions for test empty database",
    "export: Functions that export the database.",
    "listing: Functions that list elements of the  database."
]

[tool.coverage.run]
omit = [
    "tests/*",
    ]
